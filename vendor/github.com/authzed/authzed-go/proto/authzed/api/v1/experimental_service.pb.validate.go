// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authzed/api/v1/experimental_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BulkImportRelationshipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkImportRelationshipsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkImportRelationshipsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BulkImportRelationshipsRequestMultiError, or nil if none found.
func (m *BulkImportRelationshipsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkImportRelationshipsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelationships() {
		_, _ = idx, item

		if item == nil {
			err := BulkImportRelationshipsRequestValidationError{
				field:  fmt.Sprintf("Relationships[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BulkImportRelationshipsRequestValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BulkImportRelationshipsRequestValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkImportRelationshipsRequestValidationError{
					field:  fmt.Sprintf("Relationships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BulkImportRelationshipsRequestMultiError(errors)
	}

	return nil
}

// BulkImportRelationshipsRequestMultiError is an error wrapping multiple
// validation errors returned by BulkImportRelationshipsRequest.ValidateAll()
// if the designated constraints aren't met.
type BulkImportRelationshipsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkImportRelationshipsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkImportRelationshipsRequestMultiError) AllErrors() []error { return m }

// BulkImportRelationshipsRequestValidationError is the validation error
// returned by BulkImportRelationshipsRequest.Validate if the designated
// constraints aren't met.
type BulkImportRelationshipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkImportRelationshipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkImportRelationshipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkImportRelationshipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkImportRelationshipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkImportRelationshipsRequestValidationError) ErrorName() string {
	return "BulkImportRelationshipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkImportRelationshipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkImportRelationshipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkImportRelationshipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkImportRelationshipsRequestValidationError{}

// Validate checks the field values on BulkImportRelationshipsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkImportRelationshipsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkImportRelationshipsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BulkImportRelationshipsResponseMultiError, or nil if none found.
func (m *BulkImportRelationshipsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkImportRelationshipsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumLoaded

	if len(errors) > 0 {
		return BulkImportRelationshipsResponseMultiError(errors)
	}

	return nil
}

// BulkImportRelationshipsResponseMultiError is an error wrapping multiple
// validation errors returned by BulkImportRelationshipsResponse.ValidateAll()
// if the designated constraints aren't met.
type BulkImportRelationshipsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkImportRelationshipsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkImportRelationshipsResponseMultiError) AllErrors() []error { return m }

// BulkImportRelationshipsResponseValidationError is the validation error
// returned by BulkImportRelationshipsResponse.Validate if the designated
// constraints aren't met.
type BulkImportRelationshipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkImportRelationshipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkImportRelationshipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkImportRelationshipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkImportRelationshipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkImportRelationshipsResponseValidationError) ErrorName() string {
	return "BulkImportRelationshipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkImportRelationshipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkImportRelationshipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkImportRelationshipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkImportRelationshipsResponseValidationError{}

// Validate checks the field values on BulkExportRelationshipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkExportRelationshipsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkExportRelationshipsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BulkExportRelationshipsRequestMultiError, or nil if none found.
func (m *BulkExportRelationshipsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkExportRelationshipsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsistency()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BulkExportRelationshipsRequestValidationError{
					field:  "Consistency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BulkExportRelationshipsRequestValidationError{
					field:  "Consistency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsistency()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkExportRelationshipsRequestValidationError{
				field:  "Consistency",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetOptionalLimit(); val < 0 || val > 10000 {
		err := BulkExportRelationshipsRequestValidationError{
			field:  "OptionalLimit",
			reason: "value must be inside range [0, 10000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptionalCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BulkExportRelationshipsRequestValidationError{
					field:  "OptionalCursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BulkExportRelationshipsRequestValidationError{
					field:  "OptionalCursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionalCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkExportRelationshipsRequestValidationError{
				field:  "OptionalCursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BulkExportRelationshipsRequestMultiError(errors)
	}

	return nil
}

// BulkExportRelationshipsRequestMultiError is an error wrapping multiple
// validation errors returned by BulkExportRelationshipsRequest.ValidateAll()
// if the designated constraints aren't met.
type BulkExportRelationshipsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkExportRelationshipsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkExportRelationshipsRequestMultiError) AllErrors() []error { return m }

// BulkExportRelationshipsRequestValidationError is the validation error
// returned by BulkExportRelationshipsRequest.Validate if the designated
// constraints aren't met.
type BulkExportRelationshipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkExportRelationshipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkExportRelationshipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkExportRelationshipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkExportRelationshipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkExportRelationshipsRequestValidationError) ErrorName() string {
	return "BulkExportRelationshipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkExportRelationshipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkExportRelationshipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkExportRelationshipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkExportRelationshipsRequestValidationError{}

// Validate checks the field values on BulkExportRelationshipsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkExportRelationshipsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkExportRelationshipsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BulkExportRelationshipsResponseMultiError, or nil if none found.
func (m *BulkExportRelationshipsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkExportRelationshipsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAfterResultCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BulkExportRelationshipsResponseValidationError{
					field:  "AfterResultCursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BulkExportRelationshipsResponseValidationError{
					field:  "AfterResultCursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAfterResultCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkExportRelationshipsResponseValidationError{
				field:  "AfterResultCursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRelationships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BulkExportRelationshipsResponseValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BulkExportRelationshipsResponseValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkExportRelationshipsResponseValidationError{
					field:  fmt.Sprintf("Relationships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BulkExportRelationshipsResponseMultiError(errors)
	}

	return nil
}

// BulkExportRelationshipsResponseMultiError is an error wrapping multiple
// validation errors returned by BulkExportRelationshipsResponse.ValidateAll()
// if the designated constraints aren't met.
type BulkExportRelationshipsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkExportRelationshipsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkExportRelationshipsResponseMultiError) AllErrors() []error { return m }

// BulkExportRelationshipsResponseValidationError is the validation error
// returned by BulkExportRelationshipsResponse.Validate if the designated
// constraints aren't met.
type BulkExportRelationshipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkExportRelationshipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkExportRelationshipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkExportRelationshipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkExportRelationshipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkExportRelationshipsResponseValidationError) ErrorName() string {
	return "BulkExportRelationshipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkExportRelationshipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkExportRelationshipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkExportRelationshipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkExportRelationshipsResponseValidationError{}
